#!/bin/bash
# ================================================
# ZSH->DLDC ======================================
# ================================================
source .env

export UID

# ------------------------------------------------
# UTILITY ----------------------------------------
# ------------------------------------------------
function _dldc_is_running() {
  if [[ `nvidia-docker ps | awk '$2=="dldc" { print $1 }' | wc -l` -gt 0 ]] ; then
    return 0
  fi
  return 1
}

function _dldc_shell() {
  _container_id=`nvidia-docker ps --quiet --filter "name=dldc_jupyter"`

  if [[ -n $_container_id ]] ; then
    echo "Opening shell on running container ${_container_id}..."
    nvidia-docker exec -e COLUMNS="`tput cols`" -e LINES="`tput lines`" -ti $_container_id bash
  else
    echo "Opening shell on new container..."
    nvidia-docker run -it dldc bash
  fi
}

function _dldc_up_tmux_detached() {
    tmux start-server
    tmux new-session -d -s "dldc" -n "editor"
    tmux send-keys -t "dldc:editor" C-z "cd $PWD; ofe" Enter
    tmux new-window -t "dldc:2" -n "dldc"
    tmux send-keys -t "dldc:dldc" C-z "cd $PWD; ./dldc" Enter
}

# ------------------------------------------------
# DETERMINE-COMMAND ------------------------------
# ------------------------------------------------

# Default to up, allow "" for up, handle "down", handle
# additional arguments to docker-compose <command> ...
_command="up"

case $1 in

  # Default: Up or Shell
  # ----------------------------------------------
  "")
    if _dldc_is_running; then
      _dldc_shell
      exit
    fi
    # Otherwise, command will be "up"
    ;;

  # Up
  # ----------------------------------------------
  up)
    # Default command is "up". Handle everything later.
    shift
    ;;

  # Up (Tmux Deatched)
  # ----------------------------------------------
  up-detached)
    _dldc_up_tmux_detached
    exit
    ;;

  # Shell
  # ----------------------------------------------
  shell)
    _dldc_shell
    exit
    ;;

  # Is Running?
  # ----------------------------------------------
  is-running)
    _dldc_is_running
    exit
    ;;

  # Other
  # ----------------------------------------------
  *)
    _command="$1"
    shift
    ;;
esac

# ------------------------------------------------
# HANDLE->UP -------------------------------------
# ------------------------------------------------
if [[ $_command == "up" ]] ; then

  # Always build in case there are new packages in config-packages, etc.
  # If up-to-date, this will just use the cached build and continue.
  nvidia-docker build --tag dldc .

  clear

  if [ -z $EXTERNAL_HOST ] ; then
    echo "EXTERNAL_HOST is not set. Using system hostname '$HOST'"
    export EXTERNAL_HOST=$HOST
  else
    echo "Using host: $EXTERNAL_HOST"
  fi

  # Make sure we're down
  echo "Ensuring services are down..."
  nvidia-docker-compose down --remove-orphans

fi

# Issue main compose command
# ------------------------------------------------
nvidia-docker-compose $_command $*
